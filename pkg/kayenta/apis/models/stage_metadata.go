// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StageMetadata StageMetadata
//
// # Metadata around an Orca StageExecution of the canary analysis pipeline execution
//
// swagger:model StageMetadata
type StageMetadata struct {

	// The execution id if the StageExecution is a runCanary stage
	ExecutionID string `json:"executionId,omitempty"`

	// The StageExecution name
	Name string `json:"name,omitempty"`

	// The Orca execution status of the stage
	// Enum: [NOT_STARTED RUNNING PAUSED SUSPENDED SUCCEEDED FAILED_CONTINUE TERMINAL CANCELED REDIRECT STOPPED SKIPPED BUFFERED]
	Status string `json:"status,omitempty"`

	// The StageExecution type
	Type string `json:"type,omitempty"`
}

// Validate validates this stage metadata
func (m *StageMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var stageMetadataTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOT_STARTED","RUNNING","PAUSED","SUSPENDED","SUCCEEDED","FAILED_CONTINUE","TERMINAL","CANCELED","REDIRECT","STOPPED","SKIPPED","BUFFERED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stageMetadataTypeStatusPropEnum = append(stageMetadataTypeStatusPropEnum, v)
	}
}

const (

	// StageMetadataStatusNOTSTARTED captures enum value "NOT_STARTED"
	StageMetadataStatusNOTSTARTED string = "NOT_STARTED"

	// StageMetadataStatusRUNNING captures enum value "RUNNING"
	StageMetadataStatusRUNNING string = "RUNNING"

	// StageMetadataStatusPAUSED captures enum value "PAUSED"
	StageMetadataStatusPAUSED string = "PAUSED"

	// StageMetadataStatusSUSPENDED captures enum value "SUSPENDED"
	StageMetadataStatusSUSPENDED string = "SUSPENDED"

	// StageMetadataStatusSUCCEEDED captures enum value "SUCCEEDED"
	StageMetadataStatusSUCCEEDED string = "SUCCEEDED"

	// StageMetadataStatusFAILEDCONTINUE captures enum value "FAILED_CONTINUE"
	StageMetadataStatusFAILEDCONTINUE string = "FAILED_CONTINUE"

	// StageMetadataStatusTERMINAL captures enum value "TERMINAL"
	StageMetadataStatusTERMINAL string = "TERMINAL"

	// StageMetadataStatusCANCELED captures enum value "CANCELED"
	StageMetadataStatusCANCELED string = "CANCELED"

	// StageMetadataStatusREDIRECT captures enum value "REDIRECT"
	StageMetadataStatusREDIRECT string = "REDIRECT"

	// StageMetadataStatusSTOPPED captures enum value "STOPPED"
	StageMetadataStatusSTOPPED string = "STOPPED"

	// StageMetadataStatusSKIPPED captures enum value "SKIPPED"
	StageMetadataStatusSKIPPED string = "SKIPPED"

	// StageMetadataStatusBUFFERED captures enum value "BUFFERED"
	StageMetadataStatusBUFFERED string = "BUFFERED"
)

// prop value enum
func (m *StageMetadata) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stageMetadataTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StageMetadata) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stage metadata based on context it is used
func (m *StageMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StageMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StageMetadata) UnmarshalBinary(b []byte) error {
	var res StageMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
