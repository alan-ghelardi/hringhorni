// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CanaryExecutionRequest CanaryExecutionRequest
//
// swagger:model CanaryExecutionRequest
type CanaryExecutionRequest struct {

	// metadata
	Metadata []*Metadata `json:"metadata"`

	// scopes
	Scopes map[string]CanaryScopePair `json:"scopes,omitempty"`

	// site local
	SiteLocal interface{} `json:"siteLocal,omitempty"`

	// thresholds
	Thresholds *CanaryClassifierThresholdsConfig `json:"thresholds,omitempty"`
}

// Validate validates this canary execution request
func (m *CanaryExecutionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThresholds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CanaryExecutionRequest) validateMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.Metadata) { // not required
		return nil
	}

	for i := 0; i < len(m.Metadata); i++ {
		if swag.IsZero(m.Metadata[i]) { // not required
			continue
		}

		if m.Metadata[i] != nil {
			if err := m.Metadata[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metadata" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CanaryExecutionRequest) validateScopes(formats strfmt.Registry) error {
	if swag.IsZero(m.Scopes) { // not required
		return nil
	}

	for k := range m.Scopes {

		if err := validate.Required("scopes"+"."+k, "body", m.Scopes[k]); err != nil {
			return err
		}
		if val, ok := m.Scopes[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scopes" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scopes" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *CanaryExecutionRequest) validateThresholds(formats strfmt.Registry) error {
	if swag.IsZero(m.Thresholds) { // not required
		return nil
	}

	if m.Thresholds != nil {
		if err := m.Thresholds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("thresholds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("thresholds")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this canary execution request based on the context it is used
func (m *CanaryExecutionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScopes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThresholds(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CanaryExecutionRequest) contextValidateMetadata(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Metadata); i++ {

		if m.Metadata[i] != nil {
			if err := m.Metadata[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metadata" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metadata" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CanaryExecutionRequest) contextValidateScopes(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Scopes {

		if val, ok := m.Scopes[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *CanaryExecutionRequest) contextValidateThresholds(ctx context.Context, formats strfmt.Registry) error {

	if m.Thresholds != nil {
		if err := m.Thresholds.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("thresholds")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("thresholds")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CanaryExecutionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CanaryExecutionRequest) UnmarshalBinary(b []byte) error {
	var res CanaryExecutionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
