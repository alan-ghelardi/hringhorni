// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CanaryAnalysisExecutionStatusResponse CanaryAnalysisExecutionStatusResponse
//
// The canary analysis execution status response.
//
// swagger:model CanaryAnalysisExecutionStatusResponse
type CanaryAnalysisExecutionStatusResponse struct {

	// The application under test.
	Application string `json:"application,omitempty"`

	// buildTimeIso is an ISO 8061 string and refers to the time the pipeline was first created.
	BuildTimeIso string `json:"buildTimeIso,omitempty"`

	// buildTimeMillis is in epoch millis time and refers to the time the pipeline was first created.
	BuildTimeMillis int64 `json:"buildTimeMillis,omitempty"`

	// The supplied request configuration.
	CanaryAnalysisExecutionRequest *CanaryAnalysisExecutionRequest `json:"canaryAnalysisExecutionRequest,omitempty"`

	// This is the actual result of the canary analysis execution which will be present when complete is true.
	CanaryAnalysisExecutionResult *CanaryAnalysisExecutionResult `json:"canaryAnalysisExecutionResult,omitempty"`

	// The supplied or retrieved canary configuration used.
	CanaryConfig *CanaryConfig `json:"canaryConfig,omitempty"`

	// This is the supplied canary config id if one was provided.
	CanaryConfigID string `json:"canaryConfigId,omitempty"`

	// This indicates that the task/stage/pipeline has finished its work, independent of whether it was successful.
	Complete bool `json:"complete,omitempty"`

	// endTimeIso is an ISO 8061 string and refers to the time the pipeline ended, either successfully or unsuccessfully.
	EndTimeIso string `json:"endTimeIso,omitempty"`

	// endTimeMillis is in epoch millis time and refers to the time the pipeline ended, either successfully or unsuccessfully.
	EndTimeMillis int64 `json:"endTimeMillis,omitempty"`

	// This shows the first exception if any occurred.
	Exception interface{} `json:"exception,omitempty"`

	// This is the Orca Execution Status for the Canary Analysis Pipeline Execution.
	// Enum: [NOT_STARTED RUNNING PAUSED SUSPENDED SUCCEEDED FAILED_CONTINUE TERMINAL CANCELED REDIRECT STOPPED SKIPPED BUFFERED]
	ExecutionStatus string `json:"executionStatus,omitempty"`

	// The resolved metrics account name.
	MetricsAccountName string `json:"metricsAccountName,omitempty"`

	// This is the parent pipeline execution id if one was provided.
	ParentPipelineExecutionID string `json:"parentPipelineExecutionId,omitempty"`

	// This is the pipeline id of this execution.
	PipelineID string `json:"pipelineId,omitempty"`

	// This is a map of StageExecution statuses which is useful for gaining insight into progress of the execution.
	StageStatus []*StageMetadata `json:"stageStatus"`

	// startTimeIso is an ISO 8061 string and refers to the time the pipeline started running.
	StartTimeIso string `json:"startTimeIso,omitempty"`

	// startTimeIso is an ISO 8061 string and refers to the time the pipeline started running.
	StartTimeMillis int64 `json:"startTimeMillis,omitempty"`

	// This is the lowercased serialized Orca status which is similar to the status in the /canary endpoints.
	Status string `json:"status,omitempty"`

	// The resolved storage account name.
	StorageAccountName string `json:"storageAccountName,omitempty"`

	// This is the initiating user. If none was supplied this will be anonymous.
	User string `json:"user,omitempty"`
}

// Validate validates this canary analysis execution status response
func (m *CanaryAnalysisExecutionStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanaryAnalysisExecutionRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCanaryAnalysisExecutionResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCanaryConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStageStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CanaryAnalysisExecutionStatusResponse) validateCanaryAnalysisExecutionRequest(formats strfmt.Registry) error {
	if swag.IsZero(m.CanaryAnalysisExecutionRequest) { // not required
		return nil
	}

	if m.CanaryAnalysisExecutionRequest != nil {
		if err := m.CanaryAnalysisExecutionRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("canaryAnalysisExecutionRequest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("canaryAnalysisExecutionRequest")
			}
			return err
		}
	}

	return nil
}

func (m *CanaryAnalysisExecutionStatusResponse) validateCanaryAnalysisExecutionResult(formats strfmt.Registry) error {
	if swag.IsZero(m.CanaryAnalysisExecutionResult) { // not required
		return nil
	}

	if m.CanaryAnalysisExecutionResult != nil {
		if err := m.CanaryAnalysisExecutionResult.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("canaryAnalysisExecutionResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("canaryAnalysisExecutionResult")
			}
			return err
		}
	}

	return nil
}

func (m *CanaryAnalysisExecutionStatusResponse) validateCanaryConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.CanaryConfig) { // not required
		return nil
	}

	if m.CanaryConfig != nil {
		if err := m.CanaryConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("canaryConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("canaryConfig")
			}
			return err
		}
	}

	return nil
}

var canaryAnalysisExecutionStatusResponseTypeExecutionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOT_STARTED","RUNNING","PAUSED","SUSPENDED","SUCCEEDED","FAILED_CONTINUE","TERMINAL","CANCELED","REDIRECT","STOPPED","SKIPPED","BUFFERED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		canaryAnalysisExecutionStatusResponseTypeExecutionStatusPropEnum = append(canaryAnalysisExecutionStatusResponseTypeExecutionStatusPropEnum, v)
	}
}

const (

	// CanaryAnalysisExecutionStatusResponseExecutionStatusNOTSTARTED captures enum value "NOT_STARTED"
	CanaryAnalysisExecutionStatusResponseExecutionStatusNOTSTARTED string = "NOT_STARTED"

	// CanaryAnalysisExecutionStatusResponseExecutionStatusRUNNING captures enum value "RUNNING"
	CanaryAnalysisExecutionStatusResponseExecutionStatusRUNNING string = "RUNNING"

	// CanaryAnalysisExecutionStatusResponseExecutionStatusPAUSED captures enum value "PAUSED"
	CanaryAnalysisExecutionStatusResponseExecutionStatusPAUSED string = "PAUSED"

	// CanaryAnalysisExecutionStatusResponseExecutionStatusSUSPENDED captures enum value "SUSPENDED"
	CanaryAnalysisExecutionStatusResponseExecutionStatusSUSPENDED string = "SUSPENDED"

	// CanaryAnalysisExecutionStatusResponseExecutionStatusSUCCEEDED captures enum value "SUCCEEDED"
	CanaryAnalysisExecutionStatusResponseExecutionStatusSUCCEEDED string = "SUCCEEDED"

	// CanaryAnalysisExecutionStatusResponseExecutionStatusFAILEDCONTINUE captures enum value "FAILED_CONTINUE"
	CanaryAnalysisExecutionStatusResponseExecutionStatusFAILEDCONTINUE string = "FAILED_CONTINUE"

	// CanaryAnalysisExecutionStatusResponseExecutionStatusTERMINAL captures enum value "TERMINAL"
	CanaryAnalysisExecutionStatusResponseExecutionStatusTERMINAL string = "TERMINAL"

	// CanaryAnalysisExecutionStatusResponseExecutionStatusCANCELED captures enum value "CANCELED"
	CanaryAnalysisExecutionStatusResponseExecutionStatusCANCELED string = "CANCELED"

	// CanaryAnalysisExecutionStatusResponseExecutionStatusREDIRECT captures enum value "REDIRECT"
	CanaryAnalysisExecutionStatusResponseExecutionStatusREDIRECT string = "REDIRECT"

	// CanaryAnalysisExecutionStatusResponseExecutionStatusSTOPPED captures enum value "STOPPED"
	CanaryAnalysisExecutionStatusResponseExecutionStatusSTOPPED string = "STOPPED"

	// CanaryAnalysisExecutionStatusResponseExecutionStatusSKIPPED captures enum value "SKIPPED"
	CanaryAnalysisExecutionStatusResponseExecutionStatusSKIPPED string = "SKIPPED"

	// CanaryAnalysisExecutionStatusResponseExecutionStatusBUFFERED captures enum value "BUFFERED"
	CanaryAnalysisExecutionStatusResponseExecutionStatusBUFFERED string = "BUFFERED"
)

// prop value enum
func (m *CanaryAnalysisExecutionStatusResponse) validateExecutionStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, canaryAnalysisExecutionStatusResponseTypeExecutionStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CanaryAnalysisExecutionStatusResponse) validateExecutionStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateExecutionStatusEnum("executionStatus", "body", m.ExecutionStatus); err != nil {
		return err
	}

	return nil
}

func (m *CanaryAnalysisExecutionStatusResponse) validateStageStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.StageStatus) { // not required
		return nil
	}

	for i := 0; i < len(m.StageStatus); i++ {
		if swag.IsZero(m.StageStatus[i]) { // not required
			continue
		}

		if m.StageStatus[i] != nil {
			if err := m.StageStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stageStatus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stageStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this canary analysis execution status response based on the context it is used
func (m *CanaryAnalysisExecutionStatusResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCanaryAnalysisExecutionRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCanaryAnalysisExecutionResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCanaryConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStageStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CanaryAnalysisExecutionStatusResponse) contextValidateCanaryAnalysisExecutionRequest(ctx context.Context, formats strfmt.Registry) error {

	if m.CanaryAnalysisExecutionRequest != nil {
		if err := m.CanaryAnalysisExecutionRequest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("canaryAnalysisExecutionRequest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("canaryAnalysisExecutionRequest")
			}
			return err
		}
	}

	return nil
}

func (m *CanaryAnalysisExecutionStatusResponse) contextValidateCanaryAnalysisExecutionResult(ctx context.Context, formats strfmt.Registry) error {

	if m.CanaryAnalysisExecutionResult != nil {
		if err := m.CanaryAnalysisExecutionResult.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("canaryAnalysisExecutionResult")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("canaryAnalysisExecutionResult")
			}
			return err
		}
	}

	return nil
}

func (m *CanaryAnalysisExecutionStatusResponse) contextValidateCanaryConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.CanaryConfig != nil {
		if err := m.CanaryConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("canaryConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("canaryConfig")
			}
			return err
		}
	}

	return nil
}

func (m *CanaryAnalysisExecutionStatusResponse) contextValidateStageStatus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StageStatus); i++ {

		if m.StageStatus[i] != nil {
			if err := m.StageStatus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stageStatus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stageStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CanaryAnalysisExecutionStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CanaryAnalysisExecutionStatusResponse) UnmarshalBinary(b []byte) error {
	var res CanaryAnalysisExecutionStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
