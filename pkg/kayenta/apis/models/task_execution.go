// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaskExecution TaskExecution
//
// swagger:model TaskExecution
type TaskExecution struct {

	// end time
	EndTime int64 `json:"endTime,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// implementing class
	ImplementingClass string `json:"implementingClass,omitempty"`

	// loop end
	LoopEnd bool `json:"loopEnd,omitempty"`

	// loop start
	LoopStart bool `json:"loopStart,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// stage end
	StageEnd bool `json:"stageEnd,omitempty"`

	// stage start
	StageStart bool `json:"stageStart,omitempty"`

	// start time
	StartTime int64 `json:"startTime,omitempty"`

	// status
	// Enum: [NOT_STARTED RUNNING PAUSED SUSPENDED SUCCEEDED FAILED_CONTINUE TERMINAL CANCELED REDIRECT STOPPED SKIPPED BUFFERED]
	Status string `json:"status,omitempty"`

	// task exception details
	TaskExceptionDetails interface{} `json:"taskExceptionDetails,omitempty"`
}

// Validate validates this task execution
func (m *TaskExecution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var taskExecutionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOT_STARTED","RUNNING","PAUSED","SUSPENDED","SUCCEEDED","FAILED_CONTINUE","TERMINAL","CANCELED","REDIRECT","STOPPED","SKIPPED","BUFFERED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taskExecutionTypeStatusPropEnum = append(taskExecutionTypeStatusPropEnum, v)
	}
}

const (

	// TaskExecutionStatusNOTSTARTED captures enum value "NOT_STARTED"
	TaskExecutionStatusNOTSTARTED string = "NOT_STARTED"

	// TaskExecutionStatusRUNNING captures enum value "RUNNING"
	TaskExecutionStatusRUNNING string = "RUNNING"

	// TaskExecutionStatusPAUSED captures enum value "PAUSED"
	TaskExecutionStatusPAUSED string = "PAUSED"

	// TaskExecutionStatusSUSPENDED captures enum value "SUSPENDED"
	TaskExecutionStatusSUSPENDED string = "SUSPENDED"

	// TaskExecutionStatusSUCCEEDED captures enum value "SUCCEEDED"
	TaskExecutionStatusSUCCEEDED string = "SUCCEEDED"

	// TaskExecutionStatusFAILEDCONTINUE captures enum value "FAILED_CONTINUE"
	TaskExecutionStatusFAILEDCONTINUE string = "FAILED_CONTINUE"

	// TaskExecutionStatusTERMINAL captures enum value "TERMINAL"
	TaskExecutionStatusTERMINAL string = "TERMINAL"

	// TaskExecutionStatusCANCELED captures enum value "CANCELED"
	TaskExecutionStatusCANCELED string = "CANCELED"

	// TaskExecutionStatusREDIRECT captures enum value "REDIRECT"
	TaskExecutionStatusREDIRECT string = "REDIRECT"

	// TaskExecutionStatusSTOPPED captures enum value "STOPPED"
	TaskExecutionStatusSTOPPED string = "STOPPED"

	// TaskExecutionStatusSKIPPED captures enum value "SKIPPED"
	TaskExecutionStatusSKIPPED string = "SKIPPED"

	// TaskExecutionStatusBUFFERED captures enum value "BUFFERED"
	TaskExecutionStatusBUFFERED string = "BUFFERED"
)

// prop value enum
func (m *TaskExecution) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taskExecutionTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaskExecution) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this task execution based on context it is used
func (m *TaskExecution) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TaskExecution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaskExecution) UnmarshalBinary(b []byte) error {
	var res TaskExecution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
