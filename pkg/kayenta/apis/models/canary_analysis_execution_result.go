// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CanaryAnalysisExecutionResult CanaryAnalysisExecutionResult
//
// The canary analysis execution results.
//
// swagger:model CanaryAnalysisExecutionResult
type CanaryAnalysisExecutionResult struct {

	// buildTimeIso is an ISO 8061 string and refers to the time the pipeline was first created.
	BuildTimeIso string `json:"buildTimeIso,omitempty"`

	// This is a list of canary execution summaries.
	CanaryExecutionResults []*CanaryExecutionResult `json:"canaryExecutionResults"`

	// This string describes the aggregated judgement results.
	CanaryScoreMessage string `json:"canaryScoreMessage,omitempty"`

	// This is an ordered list of the individual judgement scores. The last score is used for determining the final result.
	CanaryScores []float64 `json:"canaryScores"`

	// This boolean represents whether the canary passed the defined thresholds.
	DidPassThresholds bool `json:"didPassThresholds,omitempty"`

	// endTimeIso is an ISO 8061 string and refers to the time the pipeline ended, either successfully or unsuccessfully.
	EndTimeIso string `json:"endTimeIso,omitempty"`

	// This boolean is set to true if any of the judgements had warnings.
	HasWarnings bool `json:"hasWarnings,omitempty"`

	// startTimeIso is an ISO 8061 string and refers to the time the pipeline started running.
	StartTimeIso string `json:"startTimeIso,omitempty"`
}

// Validate validates this canary analysis execution result
func (m *CanaryAnalysisExecutionResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanaryExecutionResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CanaryAnalysisExecutionResult) validateCanaryExecutionResults(formats strfmt.Registry) error {
	if swag.IsZero(m.CanaryExecutionResults) { // not required
		return nil
	}

	for i := 0; i < len(m.CanaryExecutionResults); i++ {
		if swag.IsZero(m.CanaryExecutionResults[i]) { // not required
			continue
		}

		if m.CanaryExecutionResults[i] != nil {
			if err := m.CanaryExecutionResults[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("canaryExecutionResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("canaryExecutionResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this canary analysis execution result based on the context it is used
func (m *CanaryAnalysisExecutionResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCanaryExecutionResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CanaryAnalysisExecutionResult) contextValidateCanaryExecutionResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CanaryExecutionResults); i++ {

		if m.CanaryExecutionResults[i] != nil {
			if err := m.CanaryExecutionResults[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("canaryExecutionResults" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("canaryExecutionResults" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CanaryAnalysisExecutionResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CanaryAnalysisExecutionResult) UnmarshalBinary(b []byte) error {
	var res CanaryAnalysisExecutionResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
