// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CanaryExecutionStatusResponse CanaryExecutionStatusResponse
//
// swagger:model CanaryExecutionStatusResponse
type CanaryExecutionStatusResponse struct {

	// application
	Application string `json:"application,omitempty"`

	// build time iso
	BuildTimeIso string `json:"buildTimeIso,omitempty"`

	// build time millis
	BuildTimeMillis int64 `json:"buildTimeMillis,omitempty"`

	// canary config Id
	CanaryConfigID string `json:"canaryConfigId,omitempty"`

	// canary execution request
	CanaryExecutionRequest *CanaryExecutionRequest `json:"canaryExecutionRequest,omitempty"`

	// complete
	Complete bool `json:"complete,omitempty"`

	// config
	Config *CanaryConfig `json:"config,omitempty"`

	// configuration account name
	ConfigurationAccountName string `json:"configurationAccountName,omitempty"`

	// end time iso
	EndTimeIso string `json:"endTimeIso,omitempty"`

	// end time millis
	EndTimeMillis int64 `json:"endTimeMillis,omitempty"`

	// exception
	Exception interface{} `json:"exception,omitempty"`

	// metric set pair list Id
	MetricSetPairListID string `json:"metricSetPairListId,omitempty"`

	// metrics account name
	MetricsAccountName string `json:"metricsAccountName,omitempty"`

	// parent pipeline execution Id
	ParentPipelineExecutionID string `json:"parentPipelineExecutionId,omitempty"`

	// pipeline Id
	PipelineID string `json:"pipelineId,omitempty"`

	// result
	Result *CanaryResult `json:"result,omitempty"`

	// stage status
	StageStatus map[string]string `json:"stageStatus,omitempty"`

	// start time iso
	StartTimeIso string `json:"startTimeIso,omitempty"`

	// start time millis
	StartTimeMillis int64 `json:"startTimeMillis,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// storage account name
	StorageAccountName string `json:"storageAccountName,omitempty"`
}

// Validate validates this canary execution status response
func (m *CanaryExecutionStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanaryExecutionRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CanaryExecutionStatusResponse) validateCanaryExecutionRequest(formats strfmt.Registry) error {
	if swag.IsZero(m.CanaryExecutionRequest) { // not required
		return nil
	}

	if m.CanaryExecutionRequest != nil {
		if err := m.CanaryExecutionRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("canaryExecutionRequest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("canaryExecutionRequest")
			}
			return err
		}
	}

	return nil
}

func (m *CanaryExecutionStatusResponse) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config) { // not required
		return nil
	}

	if m.Config != nil {
		if err := m.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *CanaryExecutionStatusResponse) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(m.Result) { // not required
		return nil
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this canary execution status response based on the context it is used
func (m *CanaryExecutionStatusResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCanaryExecutionRequest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CanaryExecutionStatusResponse) contextValidateCanaryExecutionRequest(ctx context.Context, formats strfmt.Registry) error {

	if m.CanaryExecutionRequest != nil {
		if err := m.CanaryExecutionRequest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("canaryExecutionRequest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("canaryExecutionRequest")
			}
			return err
		}
	}

	return nil
}

func (m *CanaryExecutionStatusResponse) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.Config != nil {
		if err := m.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("config")
			}
			return err
		}
	}

	return nil
}

func (m *CanaryExecutionStatusResponse) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if m.Result != nil {
		if err := m.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CanaryExecutionStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CanaryExecutionStatusResponse) UnmarshalBinary(b []byte) error {
	var res CanaryExecutionStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
