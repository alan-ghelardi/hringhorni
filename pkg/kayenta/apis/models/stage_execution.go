// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StageExecution StageExecution
//
// swagger:model StageExecution
type StageExecution struct {

	// additional metric tags
	AdditionalMetricTags map[string]string `json:"additionalMetricTags,omitempty"`

	// context
	Context interface{} `json:"context,omitempty"`

	// end time
	EndTime int64 `json:"endTime,omitempty"`

	// execution
	Execution *PipelineExecution `json:"execution,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// last modified
	LastModified *LastModifiedDetails `json:"lastModified,omitempty"`

	// manual judgment type
	ManualJudgmentType bool `json:"manualJudgmentType,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// outputs
	Outputs interface{} `json:"outputs,omitempty"`

	// parent stage Id
	ParentStageID string `json:"parentStageId,omitempty"`

	// ref Id
	RefID string `json:"refId,omitempty"`

	// requisite stage ref ids
	RequisiteStageRefIds []string `json:"requisiteStageRefIds"`

	// scheduled time
	ScheduledTime int64 `json:"scheduledTime,omitempty"`

	// start time
	StartTime int64 `json:"startTime,omitempty"`

	// start time expiry
	StartTimeExpiry int64 `json:"startTimeExpiry,omitempty"`

	// status
	// Enum: [NOT_STARTED RUNNING PAUSED SUSPENDED SUCCEEDED FAILED_CONTINUE TERMINAL CANCELED REDIRECT STOPPED SKIPPED BUFFERED]
	Status string `json:"status,omitempty"`

	// synthetic stage owner
	// Enum: [STAGE_BEFORE STAGE_AFTER]
	SyntheticStageOwner string `json:"syntheticStageOwner,omitempty"`

	// tasks
	Tasks []*TaskExecution `json:"tasks"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this stage execution
func (m *StageExecution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastModified(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyntheticStageOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StageExecution) validateExecution(formats strfmt.Registry) error {
	if swag.IsZero(m.Execution) { // not required
		return nil
	}

	if m.Execution != nil {
		if err := m.Execution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("execution")
			}
			return err
		}
	}

	return nil
}

func (m *StageExecution) validateLastModified(formats strfmt.Registry) error {
	if swag.IsZero(m.LastModified) { // not required
		return nil
	}

	if m.LastModified != nil {
		if err := m.LastModified.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastModified")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastModified")
			}
			return err
		}
	}

	return nil
}

var stageExecutionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOT_STARTED","RUNNING","PAUSED","SUSPENDED","SUCCEEDED","FAILED_CONTINUE","TERMINAL","CANCELED","REDIRECT","STOPPED","SKIPPED","BUFFERED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stageExecutionTypeStatusPropEnum = append(stageExecutionTypeStatusPropEnum, v)
	}
}

const (

	// StageExecutionStatusNOTSTARTED captures enum value "NOT_STARTED"
	StageExecutionStatusNOTSTARTED string = "NOT_STARTED"

	// StageExecutionStatusRUNNING captures enum value "RUNNING"
	StageExecutionStatusRUNNING string = "RUNNING"

	// StageExecutionStatusPAUSED captures enum value "PAUSED"
	StageExecutionStatusPAUSED string = "PAUSED"

	// StageExecutionStatusSUSPENDED captures enum value "SUSPENDED"
	StageExecutionStatusSUSPENDED string = "SUSPENDED"

	// StageExecutionStatusSUCCEEDED captures enum value "SUCCEEDED"
	StageExecutionStatusSUCCEEDED string = "SUCCEEDED"

	// StageExecutionStatusFAILEDCONTINUE captures enum value "FAILED_CONTINUE"
	StageExecutionStatusFAILEDCONTINUE string = "FAILED_CONTINUE"

	// StageExecutionStatusTERMINAL captures enum value "TERMINAL"
	StageExecutionStatusTERMINAL string = "TERMINAL"

	// StageExecutionStatusCANCELED captures enum value "CANCELED"
	StageExecutionStatusCANCELED string = "CANCELED"

	// StageExecutionStatusREDIRECT captures enum value "REDIRECT"
	StageExecutionStatusREDIRECT string = "REDIRECT"

	// StageExecutionStatusSTOPPED captures enum value "STOPPED"
	StageExecutionStatusSTOPPED string = "STOPPED"

	// StageExecutionStatusSKIPPED captures enum value "SKIPPED"
	StageExecutionStatusSKIPPED string = "SKIPPED"

	// StageExecutionStatusBUFFERED captures enum value "BUFFERED"
	StageExecutionStatusBUFFERED string = "BUFFERED"
)

// prop value enum
func (m *StageExecution) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stageExecutionTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StageExecution) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var stageExecutionTypeSyntheticStageOwnerPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STAGE_BEFORE","STAGE_AFTER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stageExecutionTypeSyntheticStageOwnerPropEnum = append(stageExecutionTypeSyntheticStageOwnerPropEnum, v)
	}
}

const (

	// StageExecutionSyntheticStageOwnerSTAGEBEFORE captures enum value "STAGE_BEFORE"
	StageExecutionSyntheticStageOwnerSTAGEBEFORE string = "STAGE_BEFORE"

	// StageExecutionSyntheticStageOwnerSTAGEAFTER captures enum value "STAGE_AFTER"
	StageExecutionSyntheticStageOwnerSTAGEAFTER string = "STAGE_AFTER"
)

// prop value enum
func (m *StageExecution) validateSyntheticStageOwnerEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stageExecutionTypeSyntheticStageOwnerPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StageExecution) validateSyntheticStageOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.SyntheticStageOwner) { // not required
		return nil
	}

	// value enum
	if err := m.validateSyntheticStageOwnerEnum("syntheticStageOwner", "body", m.SyntheticStageOwner); err != nil {
		return err
	}

	return nil
}

func (m *StageExecution) validateTasks(formats strfmt.Registry) error {
	if swag.IsZero(m.Tasks) { // not required
		return nil
	}

	for i := 0; i < len(m.Tasks); i++ {
		if swag.IsZero(m.Tasks[i]) { // not required
			continue
		}

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this stage execution based on the context it is used
func (m *StageExecution) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExecution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastModified(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTasks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StageExecution) contextValidateExecution(ctx context.Context, formats strfmt.Registry) error {

	if m.Execution != nil {
		if err := m.Execution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("execution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("execution")
			}
			return err
		}
	}

	return nil
}

func (m *StageExecution) contextValidateLastModified(ctx context.Context, formats strfmt.Registry) error {

	if m.LastModified != nil {
		if err := m.LastModified.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastModified")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastModified")
			}
			return err
		}
	}

	return nil
}

func (m *StageExecution) contextValidateTasks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tasks); i++ {

		if m.Tasks[i] != nil {
			if err := m.Tasks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tasks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tasks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StageExecution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StageExecution) UnmarshalBinary(b []byte) error {
	var res StageExecution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
