// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PipelineExecution PipelineExecution
//
// swagger:model PipelineExecution
type PipelineExecution struct {

	// application
	Application string `json:"application,omitempty"`

	// authentication
	Authentication *AuthenticationDetails `json:"authentication,omitempty"`

	// build time
	BuildTime int64 `json:"buildTime,omitempty"`

	// canceled
	Canceled bool `json:"canceled,omitempty"`

	// canceled by
	CanceledBy string `json:"canceledBy,omitempty"`

	// cancellation reason
	CancellationReason string `json:"cancellationReason,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// end time
	EndTime int64 `json:"endTime,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// keep waiting pipelines
	KeepWaitingPipelines bool `json:"keepWaitingPipelines,omitempty"`

	// limit concurrent
	LimitConcurrent bool `json:"limitConcurrent,omitempty"`

	// max concurrent executions
	MaxConcurrentExecutions int32 `json:"maxConcurrentExecutions,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// notifications
	Notifications []MapStringObject `json:"notifications"`

	// origin
	Origin string `json:"origin,omitempty"`

	// partition
	Partition string `json:"partition,omitempty"`

	// paused
	Paused *PausedDetails `json:"paused,omitempty"`

	// pipeline config Id
	PipelineConfigID string `json:"pipelineConfigId,omitempty"`

	// source
	Source *PipelineSource `json:"source,omitempty"`

	// spel evaluator
	SpelEvaluator string `json:"spelEvaluator,omitempty"`

	// stages
	Stages []*StageExecution `json:"stages"`

	// start time
	StartTime int64 `json:"startTime,omitempty"`

	// start time expiry
	StartTimeExpiry int64 `json:"startTimeExpiry,omitempty"`

	// status
	// Enum: [NOT_STARTED RUNNING PAUSED SUSPENDED SUCCEEDED FAILED_CONTINUE TERMINAL CANCELED REDIRECT STOPPED SKIPPED BUFFERED]
	Status string `json:"status,omitempty"`

	// template variables
	TemplateVariables interface{} `json:"templateVariables,omitempty"`

	// trigger
	Trigger *Trigger `json:"trigger,omitempty"`

	// type
	// Enum: [pipeline orchestration]
	Type string `json:"type,omitempty"`
}

// Validate validates this pipeline execution
func (m *PipelineExecution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaused(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrigger(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineExecution) validateAuthentication(formats strfmt.Registry) error {
	if swag.IsZero(m.Authentication) { // not required
		return nil
	}

	if m.Authentication != nil {
		if err := m.Authentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authentication")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineExecution) validateNotifications(formats strfmt.Registry) error {
	if swag.IsZero(m.Notifications) { // not required
		return nil
	}

	for i := 0; i < len(m.Notifications); i++ {

		if m.Notifications[i] != nil {
			if err := m.Notifications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("notifications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("notifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PipelineExecution) validatePaused(formats strfmt.Registry) error {
	if swag.IsZero(m.Paused) { // not required
		return nil
	}

	if m.Paused != nil {
		if err := m.Paused.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paused")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paused")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineExecution) validateSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Source) { // not required
		return nil
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineExecution) validateStages(formats strfmt.Registry) error {
	if swag.IsZero(m.Stages) { // not required
		return nil
	}

	for i := 0; i < len(m.Stages); i++ {
		if swag.IsZero(m.Stages[i]) { // not required
			continue
		}

		if m.Stages[i] != nil {
			if err := m.Stages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var pipelineExecutionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOT_STARTED","RUNNING","PAUSED","SUSPENDED","SUCCEEDED","FAILED_CONTINUE","TERMINAL","CANCELED","REDIRECT","STOPPED","SKIPPED","BUFFERED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pipelineExecutionTypeStatusPropEnum = append(pipelineExecutionTypeStatusPropEnum, v)
	}
}

const (

	// PipelineExecutionStatusNOTSTARTED captures enum value "NOT_STARTED"
	PipelineExecutionStatusNOTSTARTED string = "NOT_STARTED"

	// PipelineExecutionStatusRUNNING captures enum value "RUNNING"
	PipelineExecutionStatusRUNNING string = "RUNNING"

	// PipelineExecutionStatusPAUSED captures enum value "PAUSED"
	PipelineExecutionStatusPAUSED string = "PAUSED"

	// PipelineExecutionStatusSUSPENDED captures enum value "SUSPENDED"
	PipelineExecutionStatusSUSPENDED string = "SUSPENDED"

	// PipelineExecutionStatusSUCCEEDED captures enum value "SUCCEEDED"
	PipelineExecutionStatusSUCCEEDED string = "SUCCEEDED"

	// PipelineExecutionStatusFAILEDCONTINUE captures enum value "FAILED_CONTINUE"
	PipelineExecutionStatusFAILEDCONTINUE string = "FAILED_CONTINUE"

	// PipelineExecutionStatusTERMINAL captures enum value "TERMINAL"
	PipelineExecutionStatusTERMINAL string = "TERMINAL"

	// PipelineExecutionStatusCANCELED captures enum value "CANCELED"
	PipelineExecutionStatusCANCELED string = "CANCELED"

	// PipelineExecutionStatusREDIRECT captures enum value "REDIRECT"
	PipelineExecutionStatusREDIRECT string = "REDIRECT"

	// PipelineExecutionStatusSTOPPED captures enum value "STOPPED"
	PipelineExecutionStatusSTOPPED string = "STOPPED"

	// PipelineExecutionStatusSKIPPED captures enum value "SKIPPED"
	PipelineExecutionStatusSKIPPED string = "SKIPPED"

	// PipelineExecutionStatusBUFFERED captures enum value "BUFFERED"
	PipelineExecutionStatusBUFFERED string = "BUFFERED"
)

// prop value enum
func (m *PipelineExecution) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pipelineExecutionTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PipelineExecution) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PipelineExecution) validateTrigger(formats strfmt.Registry) error {
	if swag.IsZero(m.Trigger) { // not required
		return nil
	}

	if m.Trigger != nil {
		if err := m.Trigger.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trigger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trigger")
			}
			return err
		}
	}

	return nil
}

var pipelineExecutionTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pipeline","orchestration"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pipelineExecutionTypeTypePropEnum = append(pipelineExecutionTypeTypePropEnum, v)
	}
}

const (

	// PipelineExecutionTypePipeline captures enum value "pipeline"
	PipelineExecutionTypePipeline string = "pipeline"

	// PipelineExecutionTypeOrchestration captures enum value "orchestration"
	PipelineExecutionTypeOrchestration string = "orchestration"
)

// prop value enum
func (m *PipelineExecution) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pipelineExecutionTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PipelineExecution) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this pipeline execution based on the context it is used
func (m *PipelineExecution) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAuthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaused(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrigger(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineExecution) contextValidateAuthentication(ctx context.Context, formats strfmt.Registry) error {

	if m.Authentication != nil {
		if err := m.Authentication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("authentication")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineExecution) contextValidateNotifications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Notifications); i++ {

		if err := m.Notifications[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("notifications" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("notifications" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PipelineExecution) contextValidatePaused(ctx context.Context, formats strfmt.Registry) error {

	if m.Paused != nil {
		if err := m.Paused.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paused")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paused")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineExecution) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {
		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *PipelineExecution) contextValidateStages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Stages); i++ {

		if m.Stages[i] != nil {
			if err := m.Stages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PipelineExecution) contextValidateTrigger(ctx context.Context, formats strfmt.Registry) error {

	if m.Trigger != nil {
		if err := m.Trigger.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trigger")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trigger")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PipelineExecution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PipelineExecution) UnmarshalBinary(b []byte) error {
	var res PipelineExecution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
