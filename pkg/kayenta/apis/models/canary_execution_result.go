// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CanaryExecutionResult CanaryExecutionResult
//
// Summary Result of the Judgement Executions. See GET /canary/${this.executionId} for full result.
//
// swagger:model CanaryExecutionResult
type CanaryExecutionResult struct {

	// buildTimeIso is an ISO 8061 string and refers to the time the pipeline was first created.
	BuildTimeIso string `json:"buildTimeIso,omitempty"`

	// buildTimeMillis is in epoch millis time and refers to the time the pipeline was first created.
	BuildTimeMillis int64 `json:"buildTimeMillis,omitempty"`

	// If set, these are the account names used for this run.
	ConfigurationAccountName string `json:"configurationAccountName,omitempty"`

	// endTimeIso is an ISO 8061 string and refers to the time the pipeline ended, either successfully or unsuccessfully.
	EndTimeIso string `json:"endTimeIso,omitempty"`

	// endTimeMillis is in epoch millis time and refers to the time the pipeline ended, either successfully or unsuccessfully.
	EndTimeMillis int64 `json:"endTimeMillis,omitempty"`

	// This shows the first exception in the Judgement Execution if any occurred.
	Exception interface{} `json:"exception,omitempty"`

	// This is the execution id of the canary judgement which can be used in the canary controller APIs to fetch the full result.
	ExecutionID string `json:"executionId,omitempty"`

	// This is the Orca Execution Status for the Canary Judgement Execution.
	// Enum: [NOT_STARTED RUNNING PAUSED SUSPENDED SUCCEEDED FAILED_CONTINUE TERMINAL CANCELED REDIRECT STOPPED SKIPPED BUFFERED]
	ExecutionStatus string `json:"executionStatus,omitempty"`

	// judgementEndTimeIso is an ISO 8061 string and is the end time used to query the metric source for this judgement.
	JudgementEndTimeIso string `json:"judgementEndTimeIso,omitempty"`

	// judgementEndTimeMillis is in epoch millis time and is the end time used to query the metric source for this judgement.
	JudgementEndTimeMillis int64 `json:"judgementEndTimeMillis,omitempty"`

	// judgementStartTimeIso is an ISO 8061 string and is the start time used to query the metric source for this judgement.
	JudgementStartTimeIso string `json:"judgementStartTimeIso,omitempty"`

	// judgementStartTimeMillis is in epoch millis time and is the start time used to query the metric source for this judgement.
	JudgementStartTimeMillis int64 `json:"judgementStartTimeMillis,omitempty"`

	// This is the metric set pair list id for this canary judgement execution which can be used for obtaining the raw metrics via the API.
	MetricSetPairListID string `json:"metricSetPairListId,omitempty"`

	// The result of the canary judgement execution.
	Result *CanaryResult `json:"result,omitempty"`

	// startTimeIso is an ISO 8061 string and refers to the time the pipeline started running.
	StartTimeIso string `json:"startTimeIso,omitempty"`

	// startTimeMillis is in epoch millis time and refers to the time the pipeline started running.
	StartTimeMillis int64 `json:"startTimeMillis,omitempty"`

	// If set, these are the account names used for this run.
	StorageAccountName string `json:"storageAccountName,omitempty"`

	// This shows any warnings that occurred during the canary judgement.
	Warnings []string `json:"warnings"`
}

// Validate validates this canary execution result
func (m *CanaryExecutionResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExecutionStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var canaryExecutionResultTypeExecutionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOT_STARTED","RUNNING","PAUSED","SUSPENDED","SUCCEEDED","FAILED_CONTINUE","TERMINAL","CANCELED","REDIRECT","STOPPED","SKIPPED","BUFFERED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		canaryExecutionResultTypeExecutionStatusPropEnum = append(canaryExecutionResultTypeExecutionStatusPropEnum, v)
	}
}

const (

	// CanaryExecutionResultExecutionStatusNOTSTARTED captures enum value "NOT_STARTED"
	CanaryExecutionResultExecutionStatusNOTSTARTED string = "NOT_STARTED"

	// CanaryExecutionResultExecutionStatusRUNNING captures enum value "RUNNING"
	CanaryExecutionResultExecutionStatusRUNNING string = "RUNNING"

	// CanaryExecutionResultExecutionStatusPAUSED captures enum value "PAUSED"
	CanaryExecutionResultExecutionStatusPAUSED string = "PAUSED"

	// CanaryExecutionResultExecutionStatusSUSPENDED captures enum value "SUSPENDED"
	CanaryExecutionResultExecutionStatusSUSPENDED string = "SUSPENDED"

	// CanaryExecutionResultExecutionStatusSUCCEEDED captures enum value "SUCCEEDED"
	CanaryExecutionResultExecutionStatusSUCCEEDED string = "SUCCEEDED"

	// CanaryExecutionResultExecutionStatusFAILEDCONTINUE captures enum value "FAILED_CONTINUE"
	CanaryExecutionResultExecutionStatusFAILEDCONTINUE string = "FAILED_CONTINUE"

	// CanaryExecutionResultExecutionStatusTERMINAL captures enum value "TERMINAL"
	CanaryExecutionResultExecutionStatusTERMINAL string = "TERMINAL"

	// CanaryExecutionResultExecutionStatusCANCELED captures enum value "CANCELED"
	CanaryExecutionResultExecutionStatusCANCELED string = "CANCELED"

	// CanaryExecutionResultExecutionStatusREDIRECT captures enum value "REDIRECT"
	CanaryExecutionResultExecutionStatusREDIRECT string = "REDIRECT"

	// CanaryExecutionResultExecutionStatusSTOPPED captures enum value "STOPPED"
	CanaryExecutionResultExecutionStatusSTOPPED string = "STOPPED"

	// CanaryExecutionResultExecutionStatusSKIPPED captures enum value "SKIPPED"
	CanaryExecutionResultExecutionStatusSKIPPED string = "SKIPPED"

	// CanaryExecutionResultExecutionStatusBUFFERED captures enum value "BUFFERED"
	CanaryExecutionResultExecutionStatusBUFFERED string = "BUFFERED"
)

// prop value enum
func (m *CanaryExecutionResult) validateExecutionStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, canaryExecutionResultTypeExecutionStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CanaryExecutionResult) validateExecutionStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateExecutionStatusEnum("executionStatus", "body", m.ExecutionStatus); err != nil {
		return err
	}

	return nil
}

func (m *CanaryExecutionResult) validateResult(formats strfmt.Registry) error {
	if swag.IsZero(m.Result) { // not required
		return nil
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this canary execution result based on the context it is used
func (m *CanaryExecutionResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResult(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CanaryExecutionResult) contextValidateResult(ctx context.Context, formats strfmt.Registry) error {

	if m.Result != nil {
		if err := m.Result.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CanaryExecutionResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CanaryExecutionResult) UnmarshalBinary(b []byte) error {
	var res CanaryExecutionResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
