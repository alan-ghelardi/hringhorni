// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CanaryConfig CanaryConfig
//
// swagger:model CanaryConfig
type CanaryConfig struct {

	// applications
	Applications []string `json:"applications"`

	// classifier
	Classifier *CanaryClassifierConfig `json:"classifier,omitempty"`

	// config version
	ConfigVersion string `json:"configVersion,omitempty"`

	// created timestamp
	CreatedTimestamp int64 `json:"createdTimestamp,omitempty"`

	// created timestamp iso
	CreatedTimestampIso string `json:"createdTimestampIso,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// judge
	Judge *CanaryJudgeConfig `json:"judge,omitempty"`

	// metrics
	Metrics []*CanaryMetricConfig `json:"metrics"`

	// name
	Name string `json:"name,omitempty"`

	// templates
	Templates map[string]string `json:"templates,omitempty"`

	// updated timestamp
	UpdatedTimestamp int64 `json:"updatedTimestamp,omitempty"`

	// updated timestamp iso
	UpdatedTimestampIso string `json:"updatedTimestampIso,omitempty"`
}

// Validate validates this canary config
func (m *CanaryConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClassifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJudge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CanaryConfig) validateClassifier(formats strfmt.Registry) error {
	if swag.IsZero(m.Classifier) { // not required
		return nil
	}

	if m.Classifier != nil {
		if err := m.Classifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classifier")
			}
			return err
		}
	}

	return nil
}

func (m *CanaryConfig) validateJudge(formats strfmt.Registry) error {
	if swag.IsZero(m.Judge) { // not required
		return nil
	}

	if m.Judge != nil {
		if err := m.Judge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("judge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("judge")
			}
			return err
		}
	}

	return nil
}

func (m *CanaryConfig) validateMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	for i := 0; i < len(m.Metrics); i++ {
		if swag.IsZero(m.Metrics[i]) { // not required
			continue
		}

		if m.Metrics[i] != nil {
			if err := m.Metrics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metrics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this canary config based on the context it is used
func (m *CanaryConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClassifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJudge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CanaryConfig) contextValidateClassifier(ctx context.Context, formats strfmt.Registry) error {

	if m.Classifier != nil {
		if err := m.Classifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("classifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("classifier")
			}
			return err
		}
	}

	return nil
}

func (m *CanaryConfig) contextValidateJudge(ctx context.Context, formats strfmt.Registry) error {

	if m.Judge != nil {
		if err := m.Judge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("judge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("judge")
			}
			return err
		}
	}

	return nil
}

func (m *CanaryConfig) contextValidateMetrics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Metrics); i++ {

		if m.Metrics[i] != nil {
			if err := m.Metrics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metrics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CanaryConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CanaryConfig) UnmarshalBinary(b []byte) error {
	var res CanaryConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
